rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    //Check if the user is signed in and if they own the document
    function isSignedInOwner(user) {
      return request.auth.uid != null && request.auth.uid == user;
    }
    //Check if the user is authenticated
    function isUserAuthorised() {
    	return request.auth.uid != null;
    }
    //Check if the user is admin
    function isUserAdmin() {
    	return isUserAuthorised()
      	&& get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Admin';
    }
    
    //USERS
    match /users/{user} {
    	allow write: if isSignedInOwner(user);
      allow read: if isUserAuthorised();
      match /goals/{goal} {
      	allow write: if isSignedInOwner(user);
        allow read: if isUserAuthorised();
      }
      match /activity/{act} {
      	allow read, write: if isSignedInOwner(user);
      }
      match /wallet/{user} {
      	allow update, read: if isSignedInOwner(user);
      }
      match /notifications/{notification} {
      	allow read, write: if isSignedInOwner(user);
      }
      match /redeem/{redeemDoc} {
      	allow write: if isSignedInOwner(user);
      }
    }
    
    //VERIFICATIONS
    match /verifications/{verify} {
    	allow read, write: if isSignedInOwner(verify);
    }
    
    //TRANSACTIONS
    match /transactions/{transaction} {
    	allow read: if 
        isUserAuthorised()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    //LOANS
    match /loans/{loan} {
    	allow read, write: if isUserAuthorised();
    }
    
    //GROUPS
    match /groups/{group} {
    	allow read, write: if isUserAuthorised();
      match /members/{member} {
      	allow read: if isUserAuthorised();
      }
    }
    
    //REEDEMABLES
    match /redeemables/{redeemable=**} {
    	allow read, write: if isUserAuthorised();
    }
    
    //INVESTMENTS
    match /investments/{investment=**} {
    	allow read: if isUserAuthorised();
    }
    
    //SAVINGS
    match /savings/{save=**} {
    	allow read: if isUserAuthorised();
    }
    
    //DEPOSITS
    match /deposits/{deposit} {
    	allow read: if 
        isUserAuthorised() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if 
        isUserAuthorised() 
        && (request.resource.data.uid == request.auth.uid)
        && (request.resource.data.amount is number)
        && exists(/databases/$(database)/documents/users/$(request.resource.data.uid));
    }
    
    //AUTOCREATES
    match /autocreates/{autocreate} {
    	allow read, write: if isUserAuthorised();
    }
    
    //WITHDRAWALS
    match /withdrawals/{withdraw} {
    	allow create: if isSignedInOwner(withdraw)
      && (request.resource.data.amount is number && request.resource.data.amount >= 10)
      && get(/databases/$(database)/documents/users/$(request.resource.data.uid)).data.phone == request.resource.data.phone;
    }
    
    //CAPTURES
    match /captures/{capture} {
    	allow read: if 
        isUserAuthorised() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if 
        isUserAuthorised()
        && (request.resource.data.transaction_user == request.auth.uid);
    }
    
    //CAPTURE PUSHES
    match /capturepushes/{capture} {
    	allow create: if 
        (request.resource.data.transaction_amount is number && request.resource.data.transaction_amount >= 1)
        && exists(/databases/$(database)/documents/users/$(request.resource.data.transaction_user)) 
    }
    
    //REVIEWS
    match /reviews/{review} {
    	allow write: if 
        isSignedInOwner(review)
        && request.resource.data.review != null;
    }
    
    //LOANPAYMENTS
    match /loanpayments/{payment} {
    	allow create: if 
      	isUserAuthorised()
        && (request.auth.uid == request.resource.data.borrowerUid)
        && (request.resource.data.amount is number && request.resource.data.amount >= 1)
        && request.resource.data.lenderUid != null
        && request.resource.data.borrowerUid != null
        && request.resource.data.loanDoc != null
        && exists(/databases/$(database)/documents/loans/$(request.resource.data.loanDoc))
        && exists(/databases/$(database)/documents/users/$(request.resource.data.lenderUid))
        && exists(/databases/$(database)/documents/users/$(request.resource.data.borrowerUid));
    }
    
    //LOTTERY
    match /lottery/{lottery} {
    	allow read: if isUserAuthorised();
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation == 'Admin';
      match /participants/{participant} {
      	allow create: if isSignedInOwner(participant);
      }
    }
    
    //BOOKINGS
    match /bookings/{booking} {
    	allow write: if isUserAdmin()
      	&& exists(/databases/$(database)/documents/investments/$(request.resource.data.title))
        && request.resource.data.booking is number
        && request.resource.data.returnVal is number
        && request.resource.data.size() == 4;
    }
  }
}