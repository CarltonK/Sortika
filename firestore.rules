rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    //Check if the user is signed in and if they own the document
    function isSignedInOwner(user) {
      return request.auth.uid != null && request.auth.uid == user;
    }
    //Check if the user is authenticated
    function isUserAuthorised() {
    	return request.auth.uid != null;
    }
    
    //USERS Collection
    match /users/{user} {
    	allow write: if isSignedInOwner(user);
      allow read: if isUserAuthorised();
      //Goals subcollection
      match /goals/{goal} {
      	allow write: if isSignedInOwner(user);
        allow read: if isUserAuthorised();
      }
      //Preferences subcollection
      match /preferences/{pref} {
      	allow read, write: if isSignedInOwner(user);
      }
      //Activity subcollection
      match /activity/{act} {
      	allow read, write: if isSignedInOwner(user);
      }
      //Wallet subcollection
      match /wallet/{user} {
      	allow create: if isSignedInOwner(user);
        allow update: if isSignedInOwner(user);
        allow read: if isUserAuthorised();
      }
      //Notifications subcollection
      match /notifications/{notification} {
      	allow read, write: if isSignedInOwner(user);
      }
      //Activity subcollection
      match /activity/{activityDoc} {
      	allow read, write: if isSignedInOwner(user);
      }
    }
    
    //VERIFICATIONS Collection
    match /verifications/{verify} {
    	allow read, write: if isSignedInOwner(verify);
    }
    
    //TRANSACTIONS Collection
    match /transactions/{transaction} {
    	allow read: if 
        isUserAuthorised()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    //LOANS Collection
    match /loans/{loan} {
    	allow read, write: if isUserAuthorised();
    }
    
    //GROUPS Collection
    match /groups/{group} {
    	allow read, write: if isUserAuthorised();
      match /members/{member} {
      	allow read: if isUserAuthorised();
      }
    }
    
    //REEDEMABLES Collection
    match /redeemables/{redeemable} {
    	allow read, write: if isUserAuthorised();
    }
    
    //INVESTMENTS Collection
    match /investments/{investment=**} {
    	allow read: if isUserAuthorised();
    }
    
    //SAVINGS Collection
    match /savings/{save=**} {
    	allow read: if isUserAuthorised();
    }
    
    //DEPOSITS Collection
    match /deposits/{deposit} {
    	allow read: if 
        isUserAuthorised() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if 
        isUserAuthorised() 
        && (request.resource.data.uid == request.auth.uid);
    }
    
    //AUTOCREATES Collection
    match /autocreates/{autocreate} {
    	allow read, write: if isUserAuthorised();
    }
    
    //WITHDRAWALS Collection
    match /withdrawals/{withdraw} {
    	allow write: if isUserAuthorised();
    }
    
    //CAPTURES Collection
    match /captures/{capture} {
    	allow read: if 
        isUserAuthorised() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow create: if 
        isUserAuthorised()
        && (request.resource.data.transaction_user == request.auth.uid);
    }
    
    //REVIEWS Collection
    match /reviews/{review} {
    	allow write: if 
        isSignedInOwner(review)
        && request.resource.data.review != null;
    }
    
    //LOANPAYMENTS Collection
    match /loanpayments/{payment} {
    	allow create: if 
      	isUserAuthorised()
        && (request.auth.uid == request.resource.data.borrowerUid)
        && (request.resource.data.amount is number && request.resource.data.amount >= 1)
        && request.resource.data.lenderUid != null
        && request.resource.data.borrowerUid != null
        && request.resource.data.loanDoc != null
        && exists(/databases/$(database)/documents/loans/$(request.resource.data.loanDoc))
        && exists(/databases/$(database)/documents/users/$(request.resource.data.lenderUid))
        && exists(/databases/$(database)/documents/users/$(request.resource.data.borrowerUid));
    }


    // !!!--- TESTING ---!!!
    // Read-only TEST
    match /readonly/{docId} {
      allow read: if true;
    }
  }
}